name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'
  pull_request:
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'
  workflow_dispatch:
  schedule: [cron: "0 1 */7 * *"]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  nightly: nightly
  stable: stable

jobs:
  # Check formatting
  rustfmt:
    name: rustfmt
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Check formatting
      run: cargo fmt --all -- --check


  # Apply clippy lints
  clippy:
    name: clippy
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Apply clippy lints
      run: cargo clippy

  # Run tests on some extra platforms
  cross:
    name: cross
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - aarch64-linux-android
          - aarch64-unknown-linux-musl
          - i686-linux-android
          - x86_64-linux-android
          - i686-pc-windows-gnu
          - x86_64-pc-windows-gnu
          - i686-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          # - mips64-unknown-linux-gnuabi64
          - riscv64gc-unknown-linux-gnu
          - wasm32-unknown-unknown
          - wasm32-unknown-emscripten
          - wasm32-wasip1
          - wasm32-wasip1-threads
          - wasm32-wasip2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo build and registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cross-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cross-
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: cargo build --target ${{ matrix.target }}
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --target ${{ matrix.target }} --no-default-features --features std

  build:
    name: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Cache cargo build and registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-test-
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v4
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-coverage-dotcargo
    - name: Run test
      run: cargo build
  
  test:
    name: test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Cache cargo build and registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-test-
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Cache ~/.cargo
      uses: actions/cache@v4
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-coverage-dotcargo
    - name: Run test
      run: cargo test
    - name: Run test(no_std, hashbrown, libm)
      run: cargo test --no-default-features --features hashbrown,libm
  
  sanitizer:
    name: sanitizer
    strategy:
      matrix:
        os:
          - ubuntu-latest 
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Cache cargo build and registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-sanitizer-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sanitizer-
      - name: Install Rust
        run: rustup update $nightly && rustup default $nightly
      - name: Install rust-src
        run: rustup component add rust-src
      - name: LSAN
        run: ci/sanitizer.sh

  miri:
    name: miri
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Cache cargo build and registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-miri-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-miri-
      - name: Miri
        run: ci/miri.sh 
  
  # valgrind
  # valgrind:
  #   name: valgrind
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Cache cargo build and registry
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           target
  #         key: ubuntu-latest-valgrind-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ubuntu-latest-valgrind-

  #     - name: Install Rust ${{ env.stable }}
  #       uses: actions-rs/toolchain@v1
  #       with:
  #           toolchain: ${{ env.stable }}
  #           override: true
  #     - name: Install Valgrind
  #       run: |
  #         sudo apt-get update -y
  #         sudo apt-get install -y valgrind
      # Compile tests
      # - name: cargo build foo
      #   run: cargo build --bin foo
      #   working-directory: integration

      # Run with valgrind
      # - name: Run valgrind foo
      #   run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/foo
      #   working-directory: integration

  docs:
    name: docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache cargo build and registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-latest-docs-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-docs-
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          override: true
      - name: "doc --lib"
        run: cargo doc --lib --no-deps
        env:
          RUSTFLAGS: --cfg docsrs

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs:
      - rustfmt
      - clippy
      - build
      - cross
      - test
      - sanitizer
      - miri
      - docs
    steps:
      - uses: actions/checkout@v3
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
      - name: Cache ~/.cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-coverage-dotcargo
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-coverage-cargo-build-target
      - name: Run tarpaulin
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --all-features --run-types tests --run-types doctests --workspace --out xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          slug: ${{ github.repository }}
